<?xml version="1.0" encoding="UTF-8"?>
<component>
	<?component error="false" debug="false"?>
	<public>
		<!-- Connector id -->
		<property name="id" get put />
		<!-- message event handler -->
		<property name="onmessage" put >
			<parameter name="object"/>
		</property>
		<!-- Method for checking if connector with specified id exists -->
		<method name="connect">
			<parameter name="id"/>
		</method>
		<!-- Method for sending message -->
		<method name="postMessage">
			<parameter name="id"/>
			<parameter name="data"/>
		</method>
	</public>
	<script language="JScript">
	<![CDATA[
	// Variables for caching data
	var	id,
		window,
		onmessage = function(){},
		document = new ActiveXObject('htmlfile'),
		script = document.Script;
	// Searching window with a property containing "Shell.Connector". 
	for(var e = new Enumerator(new ActiveXObject('Shell.Application').Windows());!e.atEnd();e.moveNext()){
		window = e.item(); 
		if(window.getProperty(window.hWnd) == 'Shell.Connector') break
	}
	// If the window is not found a new one is created
	var now = new Date();
	while(!window){
		// Fix for error when explorer.exe is killed
		try {
			window = GetObject('new:{C08AFD90-F2A1-11D1-8455-00A0C91F3880}');
		} catch(e){
			if(new Date() - now > 3000) throw new Error('Failed to create shell window');
		}
	}
	// Registering window
	window.putProperty(window.hWnd,'Shell.Connector');
	// Function for setting id
	function put_id(value){
		// Cheking if new id is already registered
		if(!connect(value)){
			// Removing previos registered callback
			if(id) window.putProperty(id,null);
			// registering new callback
			id = value;
			window.putProperty(id, function(connectorId, data){
				script.setTimeout(function(){
					try{
						onmessage(connectorId, data);
					} catch(e) {}
					// Calling garbage collector helps to release object links
					CollectGarbage();
				},0);
			});
		} else {
			throw new Error('Id is already used !');
		}
	}
	// The function returns the current connector id
	function get_id(){
		// If id is not set creating new one and registering callback
		if(!id) put_id(new Date().getTime().toString(36) + Math.random().toString(36).substr(2));
		return id
	}
	// Function to connect a reference to the callback object
	function put_onmessage(object){
		// "Incapsulation" hides JS context in destination function call
		onmessage = function(id,data){
			object(id,data);
		}
	}
	// Function to check the connection with the specified connector
	function connect(connectorId){
		try {
			// Check if object has prototype property
			window.getProperty(connectorId).prototype;
			return true
		} catch(e){}
		return false
	}
	// Function for sending messages between connectors
	function postMessage(connectorId, data){
		try {
			// Calling function object stored in property
			window.getProperty(connectorId)(get_id(),data);
			return true
		} catch(e){}
		return false
	}
	]]>
	</script>
</component>
